<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Plan de test - multi unit" enabled="true">
      <stringProp name="TestPlan.comments">Plan de test avec deux groupes d&apos;unités, DT basées sur variables</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="TCPConfigGui" testclass="ConfigTestElement" testname="Paramètres TCP par défaut : ex. connexion Morix" enabled="true">
        <stringProp name="TCPSampler.server">127.0.0.1</stringProp>
        <boolProp name="TCPSampler.reUseConnection">true</boolProp>
        <stringProp name="TCPSampler.port">13579</stringProp>
        <boolProp name="TCPSampler.nodelay">false</boolProp>
        <stringProp name="TCPSampler.timeout">500</stringProp>
        <stringProp name="TCPSampler.request"></stringProp>
        <stringProp name="TestPlan.comments">Connexion au serveur Morix.</stringProp>
        <stringProp name="TCPSampler.classname">morix.TCPClientMorixImpl</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables pré-définies : ex. protocole" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="DONNE_PRODUITS" elementType="Argument">
            <stringProp name="Argument.name">DONNE_PRODUITS</stringProp>
            <stringProp name="Argument.value">/P</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">commande client -&gt; serveur (monix -&gt; morix)</stringProp>
          </elementProp>
          <elementProp name="INSCRIPTION_CLIENT" elementType="Argument">
            <stringProp name="Argument.name">INSCRIPTION_CLIENT</stringProp>
            <stringProp name="Argument.value">/I</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">commande client -&gt; serveur (monix -&gt; morix)</stringProp>
          </elementProp>
          <elementProp name="CHANGE_QUANTITE_PRODUIT" elementType="Argument">
            <stringProp name="Argument.name">CHANGE_QUANTITE_PRODUIT</stringProp>
            <stringProp name="Argument.value">/c</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">commande client -&gt; serveur (monix -&gt; morix)</stringProp>
          </elementProp>
          <elementProp name="MODIFIE_QUANTITE_PRODUIT" elementType="Argument">
            <stringProp name="Argument.name">MODIFIE_QUANTITE_PRODUIT</stringProp>
            <stringProp name="Argument.value">/q</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">commande serveur -&gt; client (morix -&gt; monix)</stringProp>
          </elementProp>
          <elementProp name="SEPARATEUR_CHAMPS_PRODUIT" elementType="Argument">
            <stringProp name="Argument.name">SEPARATEUR_CHAMPS_PRODUIT</stringProp>
            <stringProp name="Argument.value">:::</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">utilisé dans les commandes</stringProp>
          </elementProp>
          <elementProp name="SEPARATEUR_PRODUITS" elementType="Argument">
            <stringProp name="Argument.name">SEPARATEUR_PRODUITS</stringProp>
            <stringProp name="Argument.value">///</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">utilisé dans les commandes</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_INSCRIPTION" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_INSCRIPTION</stringProp>
            <stringProp name="Argument.value">Inscription OK</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">message serveur -&gt; client</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_ERREUR" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_ERREUR</stringProp>
            <stringProp name="Argument.value">Erreur Morix : </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">message serveur -&gt; client</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Variables du protocole de communication avec le serveur Morix.</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables pré-définies : ex. DT avec variables pour multi unités" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ID_PRODUIT" elementType="Argument">
            <stringProp name="Argument.name">ID_PRODUIT</stringProp>
            <stringProp name="Argument.value">11A</stringProp>
            <stringProp name="Argument.desc">identifiant du produit utilisé pour les tests</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="QTT_DECREMENT" elementType="Argument">
            <stringProp name="Argument.name">QTT_DECREMENT</stringProp>
            <stringProp name="Argument.value">-1</stringProp>
            <stringProp name="Argument.desc">quantité de produit à enlever du stock</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="QTT_ATTENDUE_DECREMENT_1" elementType="Argument">
            <stringProp name="Argument.name">QTT_ATTENDUE_DECREMENT_1</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">quantité de produit attendue dans le stock après le premier décrément</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="QTT_ATTENDUE_DECREMENT_2" elementType="Argument">
            <stringProp name="Argument.name">QTT_ATTENDUE_DECREMENT_2</stringProp>
            <stringProp name="Argument.value">-1</stringProp>
            <stringProp name="Argument.desc">quantité de produit attendue dans le stock après le second décrément</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="QTT_INCREMENT" elementType="Argument">
            <stringProp name="Argument.name">QTT_INCREMENT</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">quantité de produit à ajouter au stock</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="QTT_ATTENDUE_INCREMENT_1" elementType="Argument">
            <stringProp name="Argument.name">QTT_ATTENDUE_INCREMENT_1</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">quantité de produit attendue dans le stock après le premier incrément</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="QTT_ATTENDUE_INCREMENT_2" elementType="Argument">
            <stringProp name="Argument.name">QTT_ATTENDUE_INCREMENT_2</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">quantité de produit attendue dans le stock après le second incrément</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">DT prévues pour deux clients avec scénario : a) 1/2 dec. b) 2/2 dec. c) 1/2 inc. d) 2/2 inc.</stringProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Groupe d&apos;unités de tests : ex. multi unités (1/2)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Contrôleur Boucle" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1326834645000</longProp>
        <longProp name="ThreadGroup.end_time">1326834645000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Groupe d&apos;unités de test du serveur Morix - cf. ex. multi unités (2/2) - cf. ex. DT avec variables pour multi unités</stringProp>
      </ThreadGroup>
      <hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Requête TCP -1- Inscription client" enabled="true">
          <stringProp name="TestPlan.comments">Inscription d&apos;un client au canal de diffusion des informations de Morix.</stringProp>
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${INSCRIPTION_CLIENT}</stringProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="78399604">${MESSAGE_INSCRIPTION}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Action test : pause 1s" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Requête TCP -1- Décrémente quantité" enabled="true">
          <stringProp name="TestPlan.comments">Test de décrément d&apos;une quantité du produit (cf. variables prédéfinies)</stringProp>
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${CHANGE_QUANTITE_PRODUIT} ${ID_PRODUIT}${SEPARATEUR_CHAMPS_PRODUIT}${QTT_DECREMENT}</stringProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2076416625">${MODIFIE_QUANTITE_PRODUIT} ${ID_PRODUIT}${SEPARATEUR_CHAMPS_PRODUIT}${QTT_ATTENDUE_DECREMENT_1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Action test : pause 2s" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Requête TCP -1- Incrémente quantité" enabled="true">
          <stringProp name="TestPlan.comments">Test d&apos;incrément d&apos;une quantité du produit (cf. variables prédéfinies)</stringProp>
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${CHANGE_QUANTITE_PRODUIT} ${ID_PRODUIT}${SEPARATEUR_CHAMPS_PRODUIT}${QTT_INCREMENT}</stringProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2076416594">${MODIFIE_QUANTITE_PRODUIT} ${ID_PRODUIT}${SEPARATEUR_CHAMPS_PRODUIT}${QTT_ATTENDUE_DECREMENT_2}</stringProp>
              <stringProp name="-423696077">${MODIFIE_QUANTITE_PRODUIT} ${ID_PRODUIT}${SEPARATEUR_CHAMPS_PRODUIT}${QTT_ATTENDUE_INCREMENT_1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Groupe d&apos;unités de tests : ex. multi unités (2/2)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Contrôleur Boucle" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1326834645000</longProp>
        <longProp name="ThreadGroup.end_time">1326834645000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Groupe d&apos;unités de test du serveur Morix - cf. ex. multi unités (1/2) - cf. ex. DT avec variables pour multi unités</stringProp>
      </ThreadGroup>
      <hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Requête TCP -2- Inscription client" enabled="true">
          <stringProp name="TestPlan.comments">Inscription d&apos;un client au canal de diffusion des informations de Morix.</stringProp>
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${INSCRIPTION_CLIENT}</stringProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="78399604">${MESSAGE_INSCRIPTION}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Action test : pause 2s" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Requête TCP -2- Décrémente quantité" enabled="true">
          <stringProp name="TestPlan.comments">Test de décrément d&apos;une quantité du produit (cf. variables prédéfinies)</stringProp>
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${CHANGE_QUANTITE_PRODUIT} ${ID_PRODUIT}${SEPARATEUR_CHAMPS_PRODUIT}${QTT_DECREMENT}</stringProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2076416625">${MODIFIE_QUANTITE_PRODUIT} ${ID_PRODUIT}${SEPARATEUR_CHAMPS_PRODUIT}${QTT_ATTENDUE_DECREMENT_1}</stringProp>
              <stringProp name="-2076416594">${MODIFIE_QUANTITE_PRODUIT} ${ID_PRODUIT}${SEPARATEUR_CHAMPS_PRODUIT}${QTT_ATTENDUE_DECREMENT_2}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Action test : pause 2s" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">2000</stringProp>
        </TestAction>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Requête TCP -2- Incrémente quantité" enabled="true">
          <stringProp name="TestPlan.comments">Test d&apos;incrément d&apos;une quantité du produit (cf. variables prédéfinies)</stringProp>
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${CHANGE_QUANTITE_PRODUIT} ${ID_PRODUIT}${SEPARATEUR_CHAMPS_PRODUIT}${QTT_INCREMENT}</stringProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-423696077">${MODIFIE_QUANTITE_PRODUIT} ${ID_PRODUIT}${SEPARATEUR_CHAMPS_PRODUIT}${QTT_ATTENDUE_INCREMENT_1}</stringProp>
              <stringProp name="-423696046">${MODIFIE_QUANTITE_PRODUIT} ${ID_PRODUIT}${SEPARATEUR_CHAMPS_PRODUIT}${QTT_ATTENDUE_INCREMENT_2}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Arbre de résultats" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
